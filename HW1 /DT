module DT(
    // Input signals
	in_n0,
	in_n1,
	in_n2,
	in_n3,
    // Output signals
    	out_n0,
    	out_n1,
    	out_n2,
    	out_n3,
    	out_n4,
	ack_n0,
	ack_n1,
	ack_n2,
	ack_n3
);

//---------------------------------------------------------------------
//   INPUT AND OUTPUT DECLARATION                         
//---------------------------------------------------------------------
input [19:0] in_n0, in_n1, in_n2, in_n3;
output logic [17:0] out_n0, out_n1, out_n2, out_n3, out_n4;
output logic ack_n0, ack_n1, ack_n2, ack_n3;
//---------------------------------------------------------------------
//   LOGIC DECLARATION
//---------------------------------------------------------------------
reg [2:0] index0,index1, index2,index3,index4;
//---------------------------------------------------------------------
//   Your design                        
//---------------------------------------------------------------------
always @(*) begin

	out_n0[15:0] = (in_n0[18:16] == 3'b000 && in_n0[19]) ? in_n0[15:0] :
                   (in_n1[18:16] == 3'b000 && in_n1[19]) ? in_n1[15:0] :
                   (in_n2[18:16] == 3'b000 && in_n2[19]) ? in_n2[15:0] :
                   (in_n3[18:16] == 3'b000 && in_n3[19]) ? in_n3[15:0] : 16'b0;

    out_n1[15:0] = (in_n0[18:16] == 3'b001 && in_n0[19]) ? in_n0[15:0] :
                   (in_n1[18:16] == 3'b001 && in_n1[19]) ? in_n1[15:0] :
                   (in_n2[18:16] == 3'b001 && in_n2[19]) ? in_n2[15:0] :
                   (in_n3[18:16] == 3'b001 && in_n3[19]) ? in_n3[15:0] : 16'b0;

	out_n2[15:0] = (in_n0[18:16] == 3'b010 && in_n0[19]) ? in_n0[15:0] :
                   (in_n1[18:16] == 3'b010 && in_n1[19]) ? in_n1[15:0] :
                   (in_n2[18:16] == 3'b010 && in_n2[19]) ? in_n2[15:0] :
                   (in_n3[18:16] == 3'b010 && in_n3[19]) ? in_n3[15:0] : 16'b0;

    out_n3[15:0] = (in_n0[18:16] == 3'b011 && in_n0[19]) ? in_n0[15:0] :
                   (in_n1[18:16] == 3'b011 && in_n1[19]) ? in_n1[15:0] :
                   (in_n2[18:16] == 3'b011 && in_n2[19]) ? in_n2[15:0] :
                   (in_n3[18:16] == 3'b011 && in_n3[19]) ? in_n3[15:0] : 16'b0;
	out_n4[15:0] = (in_n0[18:16] == 3'b100 && in_n0[19]) ? in_n0[15:0] :
                   (in_n1[18:16] == 3'b100 && in_n1[19]) ? in_n1[15:0] :
                   (in_n2[18:16] == 3'b100 && in_n2[19]) ? in_n2[15:0] :
                   (in_n3[18:16] == 3'b100 && in_n3[19]) ? in_n3[15:0] : 16'b0;


    ack_n0 = in_n0[19];
    ack_n1 = in_n1[19] & ~(in_n1[18:16] == in_n0[18:16] & in_n0[19]);
    ack_n2 = in_n2[19] & ~(in_n2[18:16] == in_n1[18:16] & in_n1[19]) & ~(in_n2[18:16] == in_n0[18:16] & in_n0[19]);
    ack_n3 = in_n3[19] & ~(in_n3[18:16] == in_n2[18:16] & in_n2[19]) & 
                        ~(in_n3[18:16] == in_n1[18:16] & in_n1[19]) & 
                        ~(in_n3[18:16] == in_n0[18:16] & in_n0[19]);


    index0 = {2'b00, (in_n0[18:16] == 3'b000 && in_n0[19])} + {2'b00, (in_n1[18:16] == 3'b000 && in_n1[19])} + 
             {2'b00, (in_n2[18:16] == 3'b000 && in_n2[19])} + {2'b00, (in_n3[18:16] == 3'b000 && in_n3[19])};
    index1 = {2'b00, (in_n0[18:16] == 3'b001 && in_n0[19])} + {2'b00, (in_n1[18:16] == 3'b001 && in_n1[19])} + 
             {2'b00, (in_n2[18:16] == 3'b001 && in_n2[19])} + {2'b00, (in_n3[18:16] == 3'b001 && in_n3[19])};
    index2 = {2'b00, (in_n0[18:16] == 3'b010 && in_n0[19])} + {2'b00, (in_n1[18:16] == 3'b010 && in_n1[19])} + 
             {2'b00, (in_n2[18:16] == 3'b010 && in_n2[19])} + {2'b00, (in_n3[18:16] == 3'b010 && in_n3[19])};
    index3 = {2'b00, (in_n0[18:16] == 3'b011 && in_n0[19])} + {2'b00, (in_n1[18:16] == 3'b011 && in_n1[19])} + 
             {2'b00, (in_n2[18:16] == 3'b011 && in_n2[19])} + {2'b00, (in_n3[18:16] == 3'b011 && in_n3[19])};
    index4 = {2'b00, (in_n0[18:16] == 3'b100 && in_n0[19])} + {2'b00, (in_n1[18:16] == 3'b100 && in_n1[19])} + 
             {2'b00, (in_n2[18:16] == 3'b100 && in_n2[19])} + {2'b00, (in_n3[18:16] == 3'b100 && in_n3[19])};

    case (index0)
        2'b00: out_n0[17:16] = 2'b00;
        2'b01: out_n0[17:16] = 2'b01;
        default: out_n0[17:16] = 2'b10;
    endcase

    case (index1)
        2'b00: out_n1[17:16] = 2'b00;
        2'b01: out_n1[17:16] = 2'b01;
        default: out_n1[17:16] = 2'b10;
    endcase

    case (index2)
        2'b00: out_n2[17:16] = 2'b00;
        2'b01: out_n2[17:16] = 2'b01;
        default: out_n2[17:16] = 2'b10;
    endcase

    case (index3)
        2'b00: out_n3[17:16] = 2'b00;
        2'b01: out_n3[17:16] = 2'b01;
        default: out_n3[17:16] = 2'b10;
    endcase

    case (index4)
        2'b00: out_n4[17:16] = 2'b00;
        2'b01: out_n4[17:16] = 2'b01;
        default: out_n4[17:16] = 2'b10;
    endcase
end

endmodule

