module Comb(
  // Input signals
	in_num0,
	in_num1,
	in_num2,
	in_num3,
  // Output signals
	out_num0,
	out_num1
);
//---------------------------------------------------------------------
//   INPUT AND OUTPUT DECLARATION                         
//---------------------------------------------------------------------
input [6:0] in_num0, in_num1, in_num2, in_num3;
output logic [7:0] out_num0, out_num1;

//---------------------------------------------------------------------
//   LOGIC DECLARATION
//---------------------------------------------------------------------
logic [6:0] XNOR1_out, OR1_out, AND1_out, XOR1_out;
logic [6:0] CompA1_out, CompA2_out, CompB1_out, CompB2_out;
logic [7:0] Adder1_out, Adder2_out;

//---------------------------------------------------------------------
//   Your DESIGN                        
//---------------------------------------------------------------------
assign XNOR1_out = in_num0 ~^ in_num1;
assign OR1_out = in_num1 | in_num3;
assign AND1_out = in_num0 & in_num2;
assign XOR1_out = in_num2 ^ in_num3;

assign CompA1_out = (XNOR1_out >= OR1_out)? XNOR1_out : OR1_out;
assign CompA2_out = (XNOR1_out >= OR1_out)? OR1_out : XNOR1_out;
assign CompB1_out = (AND1_out >= XOR1_out)? AND1_out : XOR1_out;
assign CompB2_out = (AND1_out >= XOR1_out)? XOR1_out : AND1_out;

assign Adder1_out = CompA1_out + CompB1_out;
assign Adder2_out = CompA2_out + CompB2_out;

assign out_num0 = Adder1_out;
assign out_num1 = Adder2_out ^ (Adder2_out >> 1);
endmodule
